# Chronos config
defaultJobOwner: '<%= node['chronos']['default_job_owner'] %>'

failureRetryDelay: <%= node['chronos']['failure_retry_delay'] %>
disableAfterFailures: <%= node['chronos']['disable_after_failures'] %>
scheduleHorizonSeconds: <%= node['chronos']['schedule_horizon_seconds'] %>
failoverTimeoutSeconds: <%= node['chronos']['failover_timeout_seconds'] %>
user: <%= node['chronos']['user'] %>

# Ganglia config
<%= "ganglia_host_port: #{node['chronos']['ganglia_host_port']}" unless node['chronos']['ganglia_host_port'].nil? %>
<%= "ganglia_group_prefix: #{node['chronos']['ganglia_group_prefix']}" unless node['chronos']['ganglia_group_prefix'].nil? %>

# Mail config
<%= "mailUser: '#{node['chronos']['mail_user']}'" unless node['chronos']['mail_user'].nil? %>
<%= "mailPassword: '#{node['chronos']['mail_password']}'" unless node['chronos']['mail_password'].nil? %>
<%= "mailServer: '#{node['chronos']['mail_server']}'" unless node['chronos']['mail_server'].nil? %>
<%= "mailFrom: '#{node['chronos']['mail_from']}'" unless node['chronos']['mail_from'].nil? %>
<%= "mailSslOn: '#{node['chronos']['mail_ssl_on']}'" unless node['chronos']['mail_ssl_on'].nil? %>

# Mesos task config

# Amount of memory, in MiB, per Mesos task
mesosTaskMem: <%= node['chronos']['mesos_task_mem'] %>
# Number of CPUs per Mesos task
mesosTaskCpu: <%= node['chronos']['mesos_task_cpu'] %>
# Amount of disk space, in MiB, required per Mesos task
mesosTaskDisk: <%= node['chronos']['mesos_task_disk'] %>

# This is the Mesos role, used by resource reservations
mesosRole: '<%= node['chronos']['mesos_role'] %>'

# This can be used to enable checkpointing for this framework
mesosCheckpoint: <%= node['chronos']['mesos_checkpoint'] %>

# Zookeeper config
zookeeperTimeoutMs: <%= node['chronos']['zookeeper_timeout_ms'] %>
zookeeperCandidateZnode: '<%= node['chronos']['zookeeper_candidate_znode'] %>'
zookeeperStateZnode: '<%= node['chronos']['zookeeper_state_znode'] %>'

<% # ZK multi-node syntax: zk://host1:port1,host2:port2,.../path
  zk_url_list = []
  @zookeeper_server_list.each do |zk_server|
    zk_url_list << "#{zk_server}:#{@zookeeper_port}"
  end
%>
<% if zk_url_list.count > 0 %>
master: '<%= 'zk://' + zk_url_list.join(',') + ',/' + @zookeeper_path %>'
zookeeperServers: '<%= zk_url_list.join(',') %>'
<% else %>
master: local
zookeeperServers: --:28281
<% end %>


# Dropwizard config
http:
    rootPath: /scheduler/*
    adminPort: <%= node['chronos']['admin_port'] %>
    port: <%= node['chronos']['webui_port'] %>

logging:
  # The default level of all loggers. Can be OFF, ERROR, WARN, INFO, DEBUG, TRACE, or ALL.
  level: <%= node['chronos']['log_level'] %>

  loggers:
    "com.airbnb.scheduler": TRACE

  file:
      # If true, write log statements to a file.
      enabled: true

      # Do not write log statements below this threshold to the file.
      threshold: ALL

      # The file to which current statements will be logged.
      currentLogFilename: <%= "#{node['chronos']['log_dir']}/chronos-1.log" %>

      # When the log file rotates, the archived log will be renamed to this and gzipped. The
      # %d is replaced with the previous day (yyyy-MM-dd). Custom rolling windows can be created
      # by passing a SimpleDateFormat-compatible format as an argument: "%d{yyyy-MM-dd-hh}".
      archivedLogFilenamePattern: ./logs/example-%d.log.gz

      # The number of archived files to keep.
      archivedFileCount: 5

      # The timezone used to format dates. HINT: USE THE DEFAULT, UTC.
      timeZone: UTC
